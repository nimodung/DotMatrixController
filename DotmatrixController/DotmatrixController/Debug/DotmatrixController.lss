
DotmatrixController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000251  0080010e  0080010e  000007c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d5  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8a  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ef  00000000  00000000  00002453  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a0  00000000  00000000  0000332e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 35       	cpi	r26, 0x5F	; 95
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9e:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Dotmatrix_init_shiftR>:
	}
	//printf("\n");
}
void Dotmatrix_init_shiftR(void)
{
	Dot_DDR |= 1 << RClk | 1 << SRClk | 1 << SER; //595 3bit 연결 // 3, 4,5번 연결
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	88 63       	ori	r24, 0x38	; 56
  aa:	87 b9       	out	0x07, r24	; 7
	Dot_PORT |= 1 << RClk; // 0b00010000; //RClk : 1 //RClk을 상승 edge로 둬서 다른 데이터가 들어가지 않게
  ac:	44 9a       	sbi	0x08, 4	; 8
  ae:	e1 e1       	ldi	r30, 0x11	; 17
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	29 e1       	ldi	r18, 0x19	; 25
  b4:	31 e0       	ldi	r19, 0x01	; 1
	
	for(int i = 0; i < 8; i++)
		dotmatrix[i] = 0xff;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	81 93       	st	Z+, r24
void Dotmatrix_init_shiftR(void)
{
	Dot_DDR |= 1 << RClk | 1 << SRClk | 1 << SER; //595 3bit 연결 // 3, 4,5번 연결
	Dot_PORT |= 1 << RClk; // 0b00010000; //RClk : 1 //RClk을 상승 edge로 둬서 다른 데이터가 들어가지 않게
	
	for(int i = 0; i < 8; i++)
  ba:	e2 17       	cp	r30, r18
  bc:	f3 07       	cpc	r31, r19
  be:	e1 f7       	brne	.-8      	; 0xb8 <Dotmatrix_init_shiftR+0x12>
		dotmatrix[i] = 0xff;
	
	return;
}
  c0:	08 95       	ret

000000c2 <main>:

int main(void)
{
	char cmd_idx = 0;
	char* str ="";
    Dotmatrix_init_shiftR();
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <Dotmatrix_init_shiftR>
	UART0_init(9600);
  c6:	60 e8       	ldi	r22, 0x80	; 128
  c8:	75 e2       	ldi	r23, 0x25	; 37
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 a4 01 	call	0x348	; 0x348 <UART0_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f e9       	ldi	r24, 0x9F	; 159
  d4:	9f e0       	ldi	r25, 0x0F	; 15
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x14>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x1a>
  dc:	00 00       	nop
	_delay_ms(1);
	Timer0_init();
  de:	0e 94 36 01 	call	0x26c	; 0x26c <Timer0_init>
	sei();
  e2:	78 94       	sei
extern char buffer[COMMAND_MAX][BUFFER_MAX]; 


int main(void)
{
	char cmd_idx = 0;
  e4:	30 e0       	ldi	r19, 0x00	; 0
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			
			//printf(buffer[cmd_idx]);
			KIM2[count] = buffer[cmd_idx];
  e6:	52 e3       	ldi	r21, 0x32	; 50
			if(count >= 8) count = 0;
			
		
			_delay_ms(500);
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
  e8:	4d ec       	ldi	r20, 0xCD	; 205
  ea:	e1 e1       	ldi	r30, 0x11	; 17
  ec:	f1 e0       	ldi	r31, 0x01	; 1
				else {
					KIM2[j] &= (str[i] << (7-i));
				}
			}
		}*/
		for(int i = 0; i < 8; i++) {
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
			
			dotmatrix[i] = KIM2[i];
  f2:	dc 01       	movw	r26, r24
  f4:	aa 5f       	subi	r26, 0xFA	; 250
  f6:	be 4f       	sbci	r27, 0xFE	; 254
  f8:	2c 91       	ld	r18, X
  fa:	21 93       	st	Z+, r18
				else {
					KIM2[j] &= (str[i] << (7-i));
				}
			}
		}*/
		for(int i = 0; i < 8; i++) {
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	91 05       	cpc	r25, r1
 102:	b9 f7       	brne	.-18     	; 0xf2 <main+0x30>
			
		}
		
		
		
		if(RX_cmd_count) {
 104:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <RX_cmd_count>
 108:	88 23       	and	r24, r24
 10a:	79 f3       	breq	.-34     	; 0xea <main+0x28>
			RX_cmd_count--;
 10c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <RX_cmd_count>
 110:	81 50       	subi	r24, 0x01	; 1
 112:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <RX_cmd_count>
			
			//printf(buffer[cmd_idx]);
			KIM2[count] = buffer[cmd_idx];
 116:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <count>
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	53 9f       	mul	r21, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	80 5a       	subi	r24, 0xA0	; 160
 124:	9e 4f       	sbci	r25, 0xFE	; 254
 126:	ea 5f       	subi	r30, 0xFA	; 250
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	80 83       	st	Z, r24
			count++;
 12c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <count>
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <count>
			if(count >= 8) count = 0;
 136:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <count>
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	10 f0       	brcs	.+4      	; 0x142 <main+0x80>
 13e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <count>
 142:	9f ef       	ldi	r25, 0xFF	; 255
 144:	29 e6       	ldi	r18, 0x69	; 105
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	91 50       	subi	r25, 0x01	; 1
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x86>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x90>
 152:	00 00       	nop
			
		
			_delay_ms(500);
			cmd_idx++;
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	93 0f       	add	r25, r19
			cmd_idx = cmd_idx % COMMAND_MAX;
 158:	94 9f       	mul	r25, r20
 15a:	31 2d       	mov	r19, r1
 15c:	11 24       	eor	r1, r1
 15e:	36 95       	lsr	r19
 160:	36 95       	lsr	r19
 162:	36 95       	lsr	r19
 164:	33 0f       	add	r19, r19
 166:	83 2f       	mov	r24, r19
 168:	88 0f       	add	r24, r24
 16a:	88 0f       	add	r24, r24
 16c:	38 0f       	add	r19, r24
 16e:	93 1b       	sub	r25, r19
 170:	39 2f       	mov	r19, r25
 172:	bb cf       	rjmp	.-138    	; 0xea <main+0x28>

00000174 <Dotmatrix_shift_out>:
}

void Dotmatrix_shift_out(uint8_t data, uint8_t comm)
{
	
	Dot_PORT &= ~(1 << RClk);
 174:	44 98       	cbi	0x08, 4	; 8
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
	{
		Dot_PORT &= ~(1 << SRClk);
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		Dot_PORT |= ((data << i) & 1) << SER; //받아온 data 값을 0 아니면 1
 17a:	e8 2f       	mov	r30, r24
 17c:	f0 e0       	ldi	r31, 0x00	; 0
{
	
	Dot_PORT &= ~(1 << RClk);
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
	{
		Dot_PORT &= ~(1 << SRClk);
 17e:	45 98       	cbi	0x08, 5	; 8
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
 180:	43 98       	cbi	0x08, 3	; 8
		Dot_PORT |= ((data << i) & 1) << SER; //받아온 data 값을 0 아니면 1
 182:	98 b1       	in	r25, 0x08	; 8
 184:	9f 01       	movw	r18, r30
 186:	04 2e       	mov	r0, r20
 188:	02 c0       	rjmp	.+4      	; 0x18e <Dotmatrix_shift_out+0x1a>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <Dotmatrix_shift_out+0x16>
 192:	21 70       	andi	r18, 0x01	; 1
 194:	33 27       	eor	r19, r19
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	29 2b       	or	r18, r25
 1a4:	28 b9       	out	0x08, r18	; 8
		Dot_PORT |= 1 << SRClk;//0b00100000; //상승 edge
 1a6:	45 9a       	sbi	0x08, 5	; 8

void Dotmatrix_shift_out(uint8_t data, uint8_t comm)
{
	
	Dot_PORT &= ~(1 << RClk);
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
 1a8:	4f 5f       	subi	r20, 0xFF	; 255
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
 1ac:	48 30       	cpi	r20, 0x08	; 8
 1ae:	51 05       	cpc	r21, r1
 1b0:	31 f7       	brne	.-52     	; 0x17e <Dotmatrix_shift_out+0xa>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
	
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
	{
		Dot_PORT &= ~(1 << SRClk);
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		Dot_PORT |= ((comm << i) & 1) << SER; //받아온 data 값을 0 아니면 1
 1b6:	70 e0       	ldi	r23, 0x00	; 0
		Dot_PORT |= 1 << SRClk;//0b00100000; //상승 edge
	}
	
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
	{
		Dot_PORT &= ~(1 << SRClk);
 1b8:	45 98       	cbi	0x08, 5	; 8
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
 1ba:	43 98       	cbi	0x08, 3	; 8
		Dot_PORT |= ((comm << i) & 1) << SER; //받아온 data 값을 0 아니면 1
 1bc:	48 b1       	in	r20, 0x08	; 8
 1be:	cb 01       	movw	r24, r22
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Dotmatrix_shift_out+0x54>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <Dotmatrix_shift_out+0x50>
 1cc:	81 70       	andi	r24, 0x01	; 1
 1ce:	99 27       	eor	r25, r25
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	84 2b       	or	r24, r20
 1de:	88 b9       	out	0x08, r24	; 8
		Dot_PORT |= 1 << SRClk;//0b00100000; //상승 edge
 1e0:	45 9a       	sbi	0x08, 5	; 8
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		Dot_PORT |= ((data << i) & 1) << SER; //받아온 data 값을 0 아니면 1
		Dot_PORT |= 1 << SRClk;//0b00100000; //상승 edge
	}
	
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	28 30       	cpi	r18, 0x08	; 8
 1e8:	31 05       	cpc	r19, r1
 1ea:	31 f7       	brne	.-52     	; 0x1b8 <Dotmatrix_shift_out+0x44>
		Dot_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		Dot_PORT |= ((comm << i) & 1) << SER; //받아온 data 값을 0 아니면 1
		Dot_PORT |= 1 << SRClk;//0b00100000; //상승 edge
	}
	
	Dot_PORT |= 1 << RClk; //RClk 상승 edge
 1ec:	44 9a       	sbi	0x08, 4	; 8
 1ee:	08 95       	ret

000001f0 <__vector_14>:
volatile char i = 0, j = 0, sec = 0, min = 0, RX_flag;			
volatile char count;													

//isr은 가급적 빨리 실행해야 되기 때문에 딜레이 x, 함수호출x ...
ISR(TIMER0_COMPA_vect)						//interrupt 걸리면 실행하는 내용 //Interrupt Service Routine
{	
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	2f 93       	push	r18
 1fc:	3f 93       	push	r19
 1fe:	4f 93       	push	r20
 200:	5f 93       	push	r21
 202:	6f 93       	push	r22
 204:	7f 93       	push	r23
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
 20a:	af 93       	push	r26
 20c:	bf 93       	push	r27
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
	
	
	
	
	//FND를 실제로 출력시키는 
	i++;
 212:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 	
 	if(i >= 8) i = 0;
 21c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 220:	88 30       	cpi	r24, 0x08	; 8
 222:	10 f0       	brcs	.+4      	; 0x228 <__vector_14+0x38>
 224:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	Dotmatrix_shift_out(dotmatrix[i], 0x80 >>i);
 228:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 22c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 230:	60 e8       	ldi	r22, 0x80	; 128
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <__vector_14+0x4a>
 236:	75 95       	asr	r23
 238:	67 95       	ror	r22
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <__vector_14+0x46>
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ef 5e       	subi	r30, 0xEF	; 239
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	80 81       	ld	r24, Z
 246:	0e 94 ba 00 	call	0x174	; 0x174 <Dotmatrix_shift_out>
	//Dotmatrix_shift_out(dotmatrix[i], 1 << i);

	
	//FND_COM_PORT |= FND4digit_digit[i];//< FND_shift_out보다 먼저하면 이전 데이터가 출력돼서 정확한 출력이 나오지 않음
	
} 
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <Timer0_init>:
*/

void Timer0_init(void)
{
	//타이머 초기화
	TCCR0A |= 1 << WGM01;					//0b00000010;  //CTC Mode
 26c:	84 b5       	in	r24, 0x24	; 36
 26e:	82 60       	ori	r24, 0x02	; 2
 270:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00 | 1 << CS01);		//0b00000011;  //64분주 사용(하위 3bit : 011)
 272:	85 b5       	in	r24, 0x25	; 37
 274:	83 60       	ori	r24, 0x03	; 3
 276:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;							//비교할 값 => (16,000,000 / 64) / 1000 = 250 (0 ~ "249")			//1ms 주기
 278:	89 ef       	ldi	r24, 0xF9	; 249
 27a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 27c:	ee e6       	ldi	r30, 0x6E	; 110
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	82 60       	ori	r24, 0x02	; 2
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	90 81       	ld	r25, Z
 28e:	95 ff       	sbrs	r25, 5
 290:	fd cf       	rjmp	.-6      	; 0x28c <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
 292:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 296:	08 95       	ret

00000298 <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
 2ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2b0:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
 2b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <idx.2082>
 2b8:	82 33       	cpi	r24, 0x32	; 50
 2ba:	e0 f5       	brcc	.+120    	; 0x334 <__vector_18+0x9c>
 2bc:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <RX_cmd_count>
 2c0:	9b 30       	cpi	r25, 0x0B	; 11
 2c2:	c0 f5       	brcc	.+112    	; 0x334 <__vector_18+0x9c>
		if(RX_data == '\n') { //명령이 들어옴
 2c4:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <RX_data>
 2c8:	9a 30       	cpi	r25, 0x0A	; 10
 2ca:	19 f5       	brne	.+70     	; 0x312 <__vector_18+0x7a>
			buffer[buf_idx][idx] = '\0'; //or '\0' //문자열의 마지막에 null 넣어주기
 2cc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <buf_idx.2083>
 2d0:	22 e3       	ldi	r18, 0x32	; 50
 2d2:	92 9f       	mul	r25, r18
 2d4:	f0 01       	movw	r30, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	e0 5a       	subi	r30, 0xA0	; 160
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	e8 0f       	add	r30, r24
 2de:	f1 1d       	adc	r31, r1
 2e0:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
 2e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <idx.2082>
			RX_cmd_count++;
 2e6:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <RX_cmd_count>
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	8d ec       	ldi	r24, 0xCD	; 205
 2f4:	98 9f       	mul	r25, r24
 2f6:	81 2d       	mov	r24, r1
 2f8:	11 24       	eor	r1, r1
 2fa:	86 95       	lsr	r24
 2fc:	86 95       	lsr	r24
 2fe:	86 95       	lsr	r24
 300:	88 0f       	add	r24, r24
 302:	28 2f       	mov	r18, r24
 304:	22 0f       	add	r18, r18
 306:	22 0f       	add	r18, r18
 308:	82 0f       	add	r24, r18
 30a:	98 1b       	sub	r25, r24
 30c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <buf_idx.2083>
 310:	11 c0       	rjmp	.+34     	; 0x334 <__vector_18+0x9c>
		}
		else buffer[buf_idx][idx++] = RX_data;
 312:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <buf_idx.2083>
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	98 0f       	add	r25, r24
 31a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <idx.2082>
 31e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <RX_data>
 322:	22 e3       	ldi	r18, 0x32	; 50
 324:	e2 9f       	mul	r30, r18
 326:	f0 01       	movw	r30, r0
 328:	11 24       	eor	r1, r1
 32a:	e0 5a       	subi	r30, 0xA0	; 160
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	e8 0f       	add	r30, r24
 330:	f1 1d       	adc	r31, r1
 332:	90 83       	st	Z, r25
	}
	
	//TX0_char(RX_data);
//	RX_flag = 1;
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	6b 01       	movw	r12, r22
 352:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	84 e4       	ldi	r24, 0x44	; 68
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
 360:	e1 ec       	ldi	r30, 0xC1	; 193
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	88 69       	ori	r24, 0x98	; 152
 368:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
 36a:	e2 ec       	ldi	r30, 0xC2	; 194
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	86 60       	ori	r24, 0x06	; 6
 372:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
 374:	60 e4       	ldi	r22, 0x40	; 64
 376:	72 e4       	ldi	r23, 0x42	; 66
 378:	8f e0       	ldi	r24, 0x0F	; 15
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	a7 01       	movw	r20, r14
 37e:	96 01       	movw	r18, r12
 380:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__udivmodsi4>
 384:	da 01       	movw	r26, r20
 386:	c9 01       	movw	r24, r18
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	a1 09       	sbc	r26, r1
 38c:	b1 09       	sbc	r27, r1
 38e:	89 2f       	mov	r24, r25
 390:	9a 2f       	mov	r25, r26
 392:	ab 2f       	mov	r26, r27
 394:	bb 27       	eor	r27, r27
 396:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
 3a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3a4:	8f e9       	ldi	r24, 0x9F	; 159
 3a6:	9f e0       	ldi	r25, 0x0F	; 15
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <UART0_init+0x60>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <UART0_init+0x66>
 3ae:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	08 95       	ret

000003ba <__udivmodsi4>:
 3ba:	a1 e2       	ldi	r26, 0x21	; 33
 3bc:	1a 2e       	mov	r1, r26
 3be:	aa 1b       	sub	r26, r26
 3c0:	bb 1b       	sub	r27, r27
 3c2:	fd 01       	movw	r30, r26
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <__udivmodsi4_ep>

000003c6 <__udivmodsi4_loop>:
 3c6:	aa 1f       	adc	r26, r26
 3c8:	bb 1f       	adc	r27, r27
 3ca:	ee 1f       	adc	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	a2 17       	cp	r26, r18
 3d0:	b3 07       	cpc	r27, r19
 3d2:	e4 07       	cpc	r30, r20
 3d4:	f5 07       	cpc	r31, r21
 3d6:	20 f0       	brcs	.+8      	; 0x3e0 <__udivmodsi4_ep>
 3d8:	a2 1b       	sub	r26, r18
 3da:	b3 0b       	sbc	r27, r19
 3dc:	e4 0b       	sbc	r30, r20
 3de:	f5 0b       	sbc	r31, r21

000003e0 <__udivmodsi4_ep>:
 3e0:	66 1f       	adc	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	1a 94       	dec	r1
 3ea:	69 f7       	brne	.-38     	; 0x3c6 <__udivmodsi4_loop>
 3ec:	60 95       	com	r22
 3ee:	70 95       	com	r23
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	9b 01       	movw	r18, r22
 3f6:	ac 01       	movw	r20, r24
 3f8:	bd 01       	movw	r22, r26
 3fa:	cf 01       	movw	r24, r30
 3fc:	08 95       	ret

000003fe <fdevopen>:
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	00 97       	sbiw	r24, 0x00	; 0
 408:	31 f4       	brne	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40a:	61 15       	cp	r22, r1
 40c:	71 05       	cpc	r23, r1
 40e:	19 f4       	brne	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	3a c0       	rjmp	.+116    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 416:	8b 01       	movw	r16, r22
 418:	ec 01       	movw	r28, r24
 41a:	6e e0       	ldi	r22, 0x0E	; 14
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 4a 02 	call	0x494	; 0x494 <calloc>
 426:	fc 01       	movw	r30, r24
 428:	89 2b       	or	r24, r25
 42a:	91 f3       	breq	.-28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	83 83       	std	Z+3, r24	; 0x03
 430:	01 15       	cp	r16, r1
 432:	11 05       	cpc	r17, r1
 434:	71 f0       	breq	.+28     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 436:	13 87       	std	Z+11, r17	; 0x0b
 438:	02 87       	std	Z+10, r16	; 0x0a
 43a:	81 e8       	ldi	r24, 0x81	; 129
 43c:	83 83       	std	Z+3, r24	; 0x03
 43e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <__iob>
 442:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <__iob+0x1>
 446:	89 2b       	or	r24, r25
 448:	21 f4       	brne	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	f0 93 56 03 	sts	0x0356, r31	; 0x800356 <__iob+0x1>
 44e:	e0 93 55 03 	sts	0x0355, r30	; 0x800355 <__iob>
 452:	20 97       	sbiw	r28, 0x00	; 0
 454:	c9 f0       	breq	.+50     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 456:	d1 87       	std	Z+9, r29	; 0x09
 458:	c0 87       	std	Z+8, r28	; 0x08
 45a:	83 81       	ldd	r24, Z+3	; 0x03
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	83 83       	std	Z+3, r24	; 0x03
 460:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <__iob+0x2>
 464:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <__iob+0x3>
 468:	89 2b       	or	r24, r25
 46a:	71 f4       	brne	.+28     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46c:	f0 93 58 03 	sts	0x0358, r31	; 0x800358 <__iob+0x3>
 470:	e0 93 57 03 	sts	0x0357, r30	; 0x800357 <__iob+0x2>
 474:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <__iob+0x4>
 478:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <__iob+0x5>
 47c:	89 2b       	or	r24, r25
 47e:	21 f4       	brne	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 480:	f0 93 5a 03 	sts	0x035A, r31	; 0x80035a <__iob+0x5>
 484:	e0 93 59 03 	sts	0x0359, r30	; 0x800359 <__iob+0x4>
 488:	cf 01       	movw	r24, r30
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <calloc>:
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	86 9f       	mul	r24, r22
 49e:	80 01       	movw	r16, r0
 4a0:	87 9f       	mul	r24, r23
 4a2:	10 0d       	add	r17, r0
 4a4:	96 9f       	mul	r25, r22
 4a6:	10 0d       	add	r17, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <malloc>
 4b0:	ec 01       	movw	r28, r24
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	29 f0       	breq	.+10     	; 0x4c0 <calloc+0x2c>
 4b6:	a8 01       	movw	r20, r16
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	0e 94 87 03 	call	0x70e	; 0x70e <memset>
 4c0:	ce 01       	movw	r24, r28
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <malloc>:
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	91 05       	cpc	r25, r1
 4d8:	10 f4       	brcc	.+4      	; 0x4de <malloc+0x12>
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	e0 91 5d 03 	lds	r30, 0x035D	; 0x80035d <__flp>
 4e2:	f0 91 5e 03 	lds	r31, 0x035E	; 0x80035e <__flp+0x1>
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	a0 e0       	ldi	r26, 0x00	; 0
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	30 97       	sbiw	r30, 0x00	; 0
 4f0:	19 f1       	breq	.+70     	; 0x538 <malloc+0x6c>
 4f2:	40 81       	ld	r20, Z
 4f4:	51 81       	ldd	r21, Z+1	; 0x01
 4f6:	02 81       	ldd	r16, Z+2	; 0x02
 4f8:	13 81       	ldd	r17, Z+3	; 0x03
 4fa:	48 17       	cp	r20, r24
 4fc:	59 07       	cpc	r21, r25
 4fe:	c8 f0       	brcs	.+50     	; 0x532 <malloc+0x66>
 500:	84 17       	cp	r24, r20
 502:	95 07       	cpc	r25, r21
 504:	69 f4       	brne	.+26     	; 0x520 <malloc+0x54>
 506:	10 97       	sbiw	r26, 0x00	; 0
 508:	31 f0       	breq	.+12     	; 0x516 <malloc+0x4a>
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	0c 93       	st	X, r16
 50e:	12 97       	sbiw	r26, 0x02	; 2
 510:	13 96       	adiw	r26, 0x03	; 3
 512:	1c 93       	st	X, r17
 514:	27 c0       	rjmp	.+78     	; 0x564 <malloc+0x98>
 516:	00 93 5d 03 	sts	0x035D, r16	; 0x80035d <__flp>
 51a:	10 93 5e 03 	sts	0x035E, r17	; 0x80035e <__flp+0x1>
 51e:	22 c0       	rjmp	.+68     	; 0x564 <malloc+0x98>
 520:	21 15       	cp	r18, r1
 522:	31 05       	cpc	r19, r1
 524:	19 f0       	breq	.+6      	; 0x52c <malloc+0x60>
 526:	42 17       	cp	r20, r18
 528:	53 07       	cpc	r21, r19
 52a:	18 f4       	brcc	.+6      	; 0x532 <malloc+0x66>
 52c:	9a 01       	movw	r18, r20
 52e:	bd 01       	movw	r22, r26
 530:	ef 01       	movw	r28, r30
 532:	df 01       	movw	r26, r30
 534:	f8 01       	movw	r30, r16
 536:	db cf       	rjmp	.-74     	; 0x4ee <malloc+0x22>
 538:	21 15       	cp	r18, r1
 53a:	31 05       	cpc	r19, r1
 53c:	f9 f0       	breq	.+62     	; 0x57c <malloc+0xb0>
 53e:	28 1b       	sub	r18, r24
 540:	39 0b       	sbc	r19, r25
 542:	24 30       	cpi	r18, 0x04	; 4
 544:	31 05       	cpc	r19, r1
 546:	80 f4       	brcc	.+32     	; 0x568 <malloc+0x9c>
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	9b 81       	ldd	r25, Y+3	; 0x03
 54c:	61 15       	cp	r22, r1
 54e:	71 05       	cpc	r23, r1
 550:	21 f0       	breq	.+8      	; 0x55a <malloc+0x8e>
 552:	fb 01       	movw	r30, r22
 554:	93 83       	std	Z+3, r25	; 0x03
 556:	82 83       	std	Z+2, r24	; 0x02
 558:	04 c0       	rjmp	.+8      	; 0x562 <malloc+0x96>
 55a:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <__flp+0x1>
 55e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <__flp>
 562:	fe 01       	movw	r30, r28
 564:	32 96       	adiw	r30, 0x02	; 2
 566:	44 c0       	rjmp	.+136    	; 0x5f0 <malloc+0x124>
 568:	fe 01       	movw	r30, r28
 56a:	e2 0f       	add	r30, r18
 56c:	f3 1f       	adc	r31, r19
 56e:	81 93       	st	Z+, r24
 570:	91 93       	st	Z+, r25
 572:	22 50       	subi	r18, 0x02	; 2
 574:	31 09       	sbc	r19, r1
 576:	39 83       	std	Y+1, r19	; 0x01
 578:	28 83       	st	Y, r18
 57a:	3a c0       	rjmp	.+116    	; 0x5f0 <malloc+0x124>
 57c:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <__brkval>
 580:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <__brkval+0x1>
 584:	23 2b       	or	r18, r19
 586:	41 f4       	brne	.+16     	; 0x598 <malloc+0xcc>
 588:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 58c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 590:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <__brkval+0x1>
 594:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <__brkval>
 598:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 59c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5a0:	21 15       	cp	r18, r1
 5a2:	31 05       	cpc	r19, r1
 5a4:	41 f4       	brne	.+16     	; 0x5b6 <malloc+0xea>
 5a6:	2d b7       	in	r18, 0x3d	; 61
 5a8:	3e b7       	in	r19, 0x3e	; 62
 5aa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5ae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5b2:	24 1b       	sub	r18, r20
 5b4:	35 0b       	sbc	r19, r21
 5b6:	e0 91 5b 03 	lds	r30, 0x035B	; 0x80035b <__brkval>
 5ba:	f0 91 5c 03 	lds	r31, 0x035C	; 0x80035c <__brkval+0x1>
 5be:	e2 17       	cp	r30, r18
 5c0:	f3 07       	cpc	r31, r19
 5c2:	a0 f4       	brcc	.+40     	; 0x5ec <malloc+0x120>
 5c4:	2e 1b       	sub	r18, r30
 5c6:	3f 0b       	sbc	r19, r31
 5c8:	28 17       	cp	r18, r24
 5ca:	39 07       	cpc	r19, r25
 5cc:	78 f0       	brcs	.+30     	; 0x5ec <malloc+0x120>
 5ce:	ac 01       	movw	r20, r24
 5d0:	4e 5f       	subi	r20, 0xFE	; 254
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	24 17       	cp	r18, r20
 5d6:	35 07       	cpc	r19, r21
 5d8:	48 f0       	brcs	.+18     	; 0x5ec <malloc+0x120>
 5da:	4e 0f       	add	r20, r30
 5dc:	5f 1f       	adc	r21, r31
 5de:	50 93 5c 03 	sts	0x035C, r21	; 0x80035c <__brkval+0x1>
 5e2:	40 93 5b 03 	sts	0x035B, r20	; 0x80035b <__brkval>
 5e6:	81 93       	st	Z+, r24
 5e8:	91 93       	st	Z+, r25
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <malloc+0x124>
 5ec:	e0 e0       	ldi	r30, 0x00	; 0
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	cf 01       	movw	r24, r30
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	08 95       	ret

000005fc <free>:
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	00 97       	sbiw	r24, 0x00	; 0
 602:	09 f4       	brne	.+2      	; 0x606 <free+0xa>
 604:	81 c0       	rjmp	.+258    	; 0x708 <free+0x10c>
 606:	fc 01       	movw	r30, r24
 608:	32 97       	sbiw	r30, 0x02	; 2
 60a:	13 82       	std	Z+3, r1	; 0x03
 60c:	12 82       	std	Z+2, r1	; 0x02
 60e:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <__flp>
 612:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <__flp+0x1>
 616:	10 97       	sbiw	r26, 0x00	; 0
 618:	81 f4       	brne	.+32     	; 0x63a <free+0x3e>
 61a:	20 81       	ld	r18, Z
 61c:	31 81       	ldd	r19, Z+1	; 0x01
 61e:	82 0f       	add	r24, r18
 620:	93 1f       	adc	r25, r19
 622:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <__brkval>
 626:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <__brkval+0x1>
 62a:	28 17       	cp	r18, r24
 62c:	39 07       	cpc	r19, r25
 62e:	51 f5       	brne	.+84     	; 0x684 <free+0x88>
 630:	f0 93 5c 03 	sts	0x035C, r31	; 0x80035c <__brkval+0x1>
 634:	e0 93 5b 03 	sts	0x035B, r30	; 0x80035b <__brkval>
 638:	67 c0       	rjmp	.+206    	; 0x708 <free+0x10c>
 63a:	ed 01       	movw	r28, r26
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	ce 17       	cp	r28, r30
 642:	df 07       	cpc	r29, r31
 644:	40 f4       	brcc	.+16     	; 0x656 <free+0x5a>
 646:	4a 81       	ldd	r20, Y+2	; 0x02
 648:	5b 81       	ldd	r21, Y+3	; 0x03
 64a:	9e 01       	movw	r18, r28
 64c:	41 15       	cp	r20, r1
 64e:	51 05       	cpc	r21, r1
 650:	f1 f0       	breq	.+60     	; 0x68e <free+0x92>
 652:	ea 01       	movw	r28, r20
 654:	f5 cf       	rjmp	.-22     	; 0x640 <free+0x44>
 656:	d3 83       	std	Z+3, r29	; 0x03
 658:	c2 83       	std	Z+2, r28	; 0x02
 65a:	40 81       	ld	r20, Z
 65c:	51 81       	ldd	r21, Z+1	; 0x01
 65e:	84 0f       	add	r24, r20
 660:	95 1f       	adc	r25, r21
 662:	c8 17       	cp	r28, r24
 664:	d9 07       	cpc	r29, r25
 666:	59 f4       	brne	.+22     	; 0x67e <free+0x82>
 668:	88 81       	ld	r24, Y
 66a:	99 81       	ldd	r25, Y+1	; 0x01
 66c:	84 0f       	add	r24, r20
 66e:	95 1f       	adc	r25, r21
 670:	02 96       	adiw	r24, 0x02	; 2
 672:	91 83       	std	Z+1, r25	; 0x01
 674:	80 83       	st	Z, r24
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	9b 81       	ldd	r25, Y+3	; 0x03
 67a:	93 83       	std	Z+3, r25	; 0x03
 67c:	82 83       	std	Z+2, r24	; 0x02
 67e:	21 15       	cp	r18, r1
 680:	31 05       	cpc	r19, r1
 682:	29 f4       	brne	.+10     	; 0x68e <free+0x92>
 684:	f0 93 5e 03 	sts	0x035E, r31	; 0x80035e <__flp+0x1>
 688:	e0 93 5d 03 	sts	0x035D, r30	; 0x80035d <__flp>
 68c:	3d c0       	rjmp	.+122    	; 0x708 <free+0x10c>
 68e:	e9 01       	movw	r28, r18
 690:	fb 83       	std	Y+3, r31	; 0x03
 692:	ea 83       	std	Y+2, r30	; 0x02
 694:	49 91       	ld	r20, Y+
 696:	59 91       	ld	r21, Y+
 698:	c4 0f       	add	r28, r20
 69a:	d5 1f       	adc	r29, r21
 69c:	ec 17       	cp	r30, r28
 69e:	fd 07       	cpc	r31, r29
 6a0:	61 f4       	brne	.+24     	; 0x6ba <free+0xbe>
 6a2:	80 81       	ld	r24, Z
 6a4:	91 81       	ldd	r25, Z+1	; 0x01
 6a6:	84 0f       	add	r24, r20
 6a8:	95 1f       	adc	r25, r21
 6aa:	02 96       	adiw	r24, 0x02	; 2
 6ac:	e9 01       	movw	r28, r18
 6ae:	99 83       	std	Y+1, r25	; 0x01
 6b0:	88 83       	st	Y, r24
 6b2:	82 81       	ldd	r24, Z+2	; 0x02
 6b4:	93 81       	ldd	r25, Z+3	; 0x03
 6b6:	9b 83       	std	Y+3, r25	; 0x03
 6b8:	8a 83       	std	Y+2, r24	; 0x02
 6ba:	e0 e0       	ldi	r30, 0x00	; 0
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	12 96       	adiw	r26, 0x02	; 2
 6c0:	8d 91       	ld	r24, X+
 6c2:	9c 91       	ld	r25, X
 6c4:	13 97       	sbiw	r26, 0x03	; 3
 6c6:	00 97       	sbiw	r24, 0x00	; 0
 6c8:	19 f0       	breq	.+6      	; 0x6d0 <free+0xd4>
 6ca:	fd 01       	movw	r30, r26
 6cc:	dc 01       	movw	r26, r24
 6ce:	f7 cf       	rjmp	.-18     	; 0x6be <free+0xc2>
 6d0:	8d 91       	ld	r24, X+
 6d2:	9c 91       	ld	r25, X
 6d4:	11 97       	sbiw	r26, 0x01	; 1
 6d6:	9d 01       	movw	r18, r26
 6d8:	2e 5f       	subi	r18, 0xFE	; 254
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	82 0f       	add	r24, r18
 6de:	93 1f       	adc	r25, r19
 6e0:	20 91 5b 03 	lds	r18, 0x035B	; 0x80035b <__brkval>
 6e4:	30 91 5c 03 	lds	r19, 0x035C	; 0x80035c <__brkval+0x1>
 6e8:	28 17       	cp	r18, r24
 6ea:	39 07       	cpc	r19, r25
 6ec:	69 f4       	brne	.+26     	; 0x708 <free+0x10c>
 6ee:	30 97       	sbiw	r30, 0x00	; 0
 6f0:	29 f4       	brne	.+10     	; 0x6fc <free+0x100>
 6f2:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <__flp+0x1>
 6f6:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <__flp>
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <free+0x104>
 6fc:	13 82       	std	Z+3, r1	; 0x03
 6fe:	12 82       	std	Z+2, r1	; 0x02
 700:	b0 93 5c 03 	sts	0x035C, r27	; 0x80035c <__brkval+0x1>
 704:	a0 93 5b 03 	sts	0x035B, r26	; 0x80035b <__brkval>
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <memset>:
 70e:	dc 01       	movw	r26, r24
 710:	01 c0       	rjmp	.+2      	; 0x714 <memset+0x6>
 712:	6d 93       	st	X+, r22
 714:	41 50       	subi	r20, 0x01	; 1
 716:	50 40       	sbci	r21, 0x00	; 0
 718:	e0 f7       	brcc	.-8      	; 0x712 <memset+0x4>
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
